// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service.proto

#include "service.pb.h"
#include "service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace session {

static const char* SessionService_method_names[] = {
  "/session.SessionService/Save",
  "/session.SessionService/Get",
  "/session.SessionService/Create",
};

std::unique_ptr< SessionService::Stub> SessionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SessionService::Stub> stub(new SessionService::Stub(channel));
  return stub;
}

SessionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Save_(SessionService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Get_(SessionService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Create_(SessionService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SessionService::Stub::Save(::grpc::ClientContext* context, const ::session::SaveRequest& request, ::session::SaveResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Save_, context, request, response);
}

void SessionService::Stub::experimental_async::Save(::grpc::ClientContext* context, const ::session::SaveRequest* request, ::session::SaveResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Save_, context, request, response, std::move(f));
}

void SessionService::Stub::experimental_async::Save(::grpc::ClientContext* context, const ::session::SaveRequest* request, ::session::SaveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Save_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::session::SaveResponse>* SessionService::Stub::PrepareAsyncSaveRaw(::grpc::ClientContext* context, const ::session::SaveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::session::SaveResponse>::Create(channel_.get(), cq, rpcmethod_Save_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::session::SaveResponse>* SessionService::Stub::AsyncSaveRaw(::grpc::ClientContext* context, const ::session::SaveRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSaveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SessionService::Stub::Get(::grpc::ClientContext* context, const ::session::GetRequest& request, ::session::GetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Get_, context, request, response);
}

void SessionService::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::session::GetRequest* request, ::session::GetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void SessionService::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::session::GetRequest* request, ::session::GetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::session::GetResponse>* SessionService::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::session::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::session::GetResponse>::Create(channel_.get(), cq, rpcmethod_Get_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::session::GetResponse>* SessionService::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::session::GetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SessionService::Stub::Create(::grpc::ClientContext* context, const ::session::CreateRequest& request, ::session::CreateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Create_, context, request, response);
}

void SessionService::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::session::CreateRequest* request, ::session::CreateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void SessionService::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::session::CreateRequest* request, ::session::CreateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::session::CreateResponse>* SessionService::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::session::CreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::session::CreateResponse>::Create(channel_.get(), cq, rpcmethod_Create_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::session::CreateResponse>* SessionService::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::session::CreateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

SessionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SessionService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SessionService::Service, ::session::SaveRequest, ::session::SaveResponse>(
          [](SessionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::session::SaveRequest* req,
             ::session::SaveResponse* resp) {
               return service->Save(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SessionService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SessionService::Service, ::session::GetRequest, ::session::GetResponse>(
          [](SessionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::session::GetRequest* req,
             ::session::GetResponse* resp) {
               return service->Get(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SessionService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SessionService::Service, ::session::CreateRequest, ::session::CreateResponse>(
          [](SessionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::session::CreateRequest* req,
             ::session::CreateResponse* resp) {
               return service->Create(ctx, req, resp);
             }, this)));
}

SessionService::Service::~Service() {
}

::grpc::Status SessionService::Service::Save(::grpc::ServerContext* context, const ::session::SaveRequest* request, ::session::SaveResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SessionService::Service::Get(::grpc::ServerContext* context, const ::session::GetRequest* request, ::session::GetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SessionService::Service::Create(::grpc::ServerContext* context, const ::session::CreateRequest* request, ::session::CreateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace session

