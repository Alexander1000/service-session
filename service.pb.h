// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

#ifndef PROTOBUF_INCLUDED_service_2eproto
#define PROTOBUF_INCLUDED_service_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_service_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_service_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_service_2eproto();
namespace session {
class GetRequest;
class GetRequestDefaultTypeInternal;
extern GetRequestDefaultTypeInternal _GetRequest_default_instance_;
class GetResponse;
class GetResponseDefaultTypeInternal;
extern GetResponseDefaultTypeInternal _GetResponse_default_instance_;
class SaveRequest;
class SaveRequestDefaultTypeInternal;
extern SaveRequestDefaultTypeInternal _SaveRequest_default_instance_;
class SaveResponse;
class SaveResponseDefaultTypeInternal;
extern SaveResponseDefaultTypeInternal _SaveResponse_default_instance_;
}  // namespace session
namespace google {
namespace protobuf {
template<> ::session::GetRequest* Arena::CreateMaybeMessage<::session::GetRequest>(Arena*);
template<> ::session::GetResponse* Arena::CreateMaybeMessage<::session::GetResponse>(Arena*);
template<> ::session::SaveRequest* Arena::CreateMaybeMessage<::session::SaveRequest>(Arena*);
template<> ::session::SaveResponse* Arena::CreateMaybeMessage<::session::SaveResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace session {

// ===================================================================

class SaveRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:session.SaveRequest) */ {
 public:
  SaveRequest();
  virtual ~SaveRequest();

  SaveRequest(const SaveRequest& from);

  inline SaveRequest& operator=(const SaveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SaveRequest(SaveRequest&& from) noexcept
    : SaveRequest() {
    *this = ::std::move(from);
  }

  inline SaveRequest& operator=(SaveRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SaveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SaveRequest* internal_default_instance() {
    return reinterpret_cast<const SaveRequest*>(
               &_SaveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SaveRequest* other);
  friend void swap(SaveRequest& a, SaveRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SaveRequest* New() const final {
    return CreateMaybeMessage<SaveRequest>(nullptr);
  }

  SaveRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SaveRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SaveRequest& from);
  void MergeFrom(const SaveRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sessid = 1;
  void clear_sessid();
  static const int kSessidFieldNumber = 1;
  const ::std::string& sessid() const;
  void set_sessid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessid(::std::string&& value);
  #endif
  void set_sessid(const char* value);
  void set_sessid(const char* value, size_t size);
  ::std::string* mutable_sessid();
  ::std::string* release_sessid();
  void set_allocated_sessid(::std::string* sessid);

  // string access_token = 3;
  void clear_access_token();
  static const int kAccessTokenFieldNumber = 3;
  const ::std::string& access_token() const;
  void set_access_token(const ::std::string& value);
  #if LANG_CXX11
  void set_access_token(::std::string&& value);
  #endif
  void set_access_token(const char* value);
  void set_access_token(const char* value, size_t size);
  ::std::string* mutable_access_token();
  ::std::string* release_access_token();
  void set_allocated_access_token(::std::string* access_token);

  // string refresh_token = 4;
  void clear_refresh_token();
  static const int kRefreshTokenFieldNumber = 4;
  const ::std::string& refresh_token() const;
  void set_refresh_token(const ::std::string& value);
  #if LANG_CXX11
  void set_refresh_token(::std::string&& value);
  #endif
  void set_refresh_token(const char* value);
  void set_refresh_token(const char* value, size_t size);
  ::std::string* mutable_refresh_token();
  ::std::string* release_refresh_token();
  void set_allocated_refresh_token(::std::string* refresh_token);

  // int64 userId = 2;
  void clear_userid();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:session.SaveRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sessid_;
  ::google::protobuf::internal::ArenaStringPtr access_token_;
  ::google::protobuf::internal::ArenaStringPtr refresh_token_;
  ::google::protobuf::int64 userid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class SaveResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:session.SaveResponse) */ {
 public:
  SaveResponse();
  virtual ~SaveResponse();

  SaveResponse(const SaveResponse& from);

  inline SaveResponse& operator=(const SaveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SaveResponse(SaveResponse&& from) noexcept
    : SaveResponse() {
    *this = ::std::move(from);
  }

  inline SaveResponse& operator=(SaveResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SaveResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SaveResponse* internal_default_instance() {
    return reinterpret_cast<const SaveResponse*>(
               &_SaveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SaveResponse* other);
  friend void swap(SaveResponse& a, SaveResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SaveResponse* New() const final {
    return CreateMaybeMessage<SaveResponse>(nullptr);
  }

  SaveResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SaveResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SaveResponse& from);
  void MergeFrom(const SaveResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:session.SaveResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class GetRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:session.GetRequest) */ {
 public:
  GetRequest();
  virtual ~GetRequest();

  GetRequest(const GetRequest& from);

  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRequest(GetRequest&& from) noexcept
    : GetRequest() {
    *this = ::std::move(from);
  }

  inline GetRequest& operator=(GetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRequest* internal_default_instance() {
    return reinterpret_cast<const GetRequest*>(
               &_GetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GetRequest* other);
  friend void swap(GetRequest& a, GetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRequest* New() const final {
    return CreateMaybeMessage<GetRequest>(nullptr);
  }

  GetRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetRequest& from);
  void MergeFrom(const GetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sessid = 1;
  void clear_sessid();
  static const int kSessidFieldNumber = 1;
  const ::std::string& sessid() const;
  void set_sessid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessid(::std::string&& value);
  #endif
  void set_sessid(const char* value);
  void set_sessid(const char* value, size_t size);
  ::std::string* mutable_sessid();
  ::std::string* release_sessid();
  void set_allocated_sessid(::std::string* sessid);

  // @@protoc_insertion_point(class_scope:session.GetRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sessid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class GetResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:session.GetResponse) */ {
 public:
  GetResponse();
  virtual ~GetResponse();

  GetResponse(const GetResponse& from);

  inline GetResponse& operator=(const GetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetResponse(GetResponse&& from) noexcept
    : GetResponse() {
    *this = ::std::move(from);
  }

  inline GetResponse& operator=(GetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetResponse* internal_default_instance() {
    return reinterpret_cast<const GetResponse*>(
               &_GetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GetResponse* other);
  friend void swap(GetResponse& a, GetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetResponse* New() const final {
    return CreateMaybeMessage<GetResponse>(nullptr);
  }

  GetResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetResponse& from);
  void MergeFrom(const GetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string access_token = 2;
  void clear_access_token();
  static const int kAccessTokenFieldNumber = 2;
  const ::std::string& access_token() const;
  void set_access_token(const ::std::string& value);
  #if LANG_CXX11
  void set_access_token(::std::string&& value);
  #endif
  void set_access_token(const char* value);
  void set_access_token(const char* value, size_t size);
  ::std::string* mutable_access_token();
  ::std::string* release_access_token();
  void set_allocated_access_token(::std::string* access_token);

  // string refresh_token = 3;
  void clear_refresh_token();
  static const int kRefreshTokenFieldNumber = 3;
  const ::std::string& refresh_token() const;
  void set_refresh_token(const ::std::string& value);
  #if LANG_CXX11
  void set_refresh_token(::std::string&& value);
  #endif
  void set_refresh_token(const char* value);
  void set_refresh_token(const char* value, size_t size);
  ::std::string* mutable_refresh_token();
  ::std::string* release_refresh_token();
  void set_allocated_refresh_token(::std::string* refresh_token);

  // int64 userId = 1;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:session.GetResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr access_token_;
  ::google::protobuf::internal::ArenaStringPtr refresh_token_;
  ::google::protobuf::int64 userid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SaveRequest

// string sessid = 1;
inline void SaveRequest::clear_sessid() {
  sessid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SaveRequest::sessid() const {
  // @@protoc_insertion_point(field_get:session.SaveRequest.sessid)
  return sessid_.GetNoArena();
}
inline void SaveRequest::set_sessid(const ::std::string& value) {
  
  sessid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:session.SaveRequest.sessid)
}
#if LANG_CXX11
inline void SaveRequest::set_sessid(::std::string&& value) {
  
  sessid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:session.SaveRequest.sessid)
}
#endif
inline void SaveRequest::set_sessid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sessid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:session.SaveRequest.sessid)
}
inline void SaveRequest::set_sessid(const char* value, size_t size) {
  
  sessid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:session.SaveRequest.sessid)
}
inline ::std::string* SaveRequest::mutable_sessid() {
  
  // @@protoc_insertion_point(field_mutable:session.SaveRequest.sessid)
  return sessid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SaveRequest::release_sessid() {
  // @@protoc_insertion_point(field_release:session.SaveRequest.sessid)
  
  return sessid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SaveRequest::set_allocated_sessid(::std::string* sessid) {
  if (sessid != nullptr) {
    
  } else {
    
  }
  sessid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessid);
  // @@protoc_insertion_point(field_set_allocated:session.SaveRequest.sessid)
}

// int64 userId = 2;
inline void SaveRequest::clear_userid() {
  userid_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 SaveRequest::userid() const {
  // @@protoc_insertion_point(field_get:session.SaveRequest.userId)
  return userid_;
}
inline void SaveRequest::set_userid(::google::protobuf::int64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:session.SaveRequest.userId)
}

// string access_token = 3;
inline void SaveRequest::clear_access_token() {
  access_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SaveRequest::access_token() const {
  // @@protoc_insertion_point(field_get:session.SaveRequest.access_token)
  return access_token_.GetNoArena();
}
inline void SaveRequest::set_access_token(const ::std::string& value) {
  
  access_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:session.SaveRequest.access_token)
}
#if LANG_CXX11
inline void SaveRequest::set_access_token(::std::string&& value) {
  
  access_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:session.SaveRequest.access_token)
}
#endif
inline void SaveRequest::set_access_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  access_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:session.SaveRequest.access_token)
}
inline void SaveRequest::set_access_token(const char* value, size_t size) {
  
  access_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:session.SaveRequest.access_token)
}
inline ::std::string* SaveRequest::mutable_access_token() {
  
  // @@protoc_insertion_point(field_mutable:session.SaveRequest.access_token)
  return access_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SaveRequest::release_access_token() {
  // @@protoc_insertion_point(field_release:session.SaveRequest.access_token)
  
  return access_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SaveRequest::set_allocated_access_token(::std::string* access_token) {
  if (access_token != nullptr) {
    
  } else {
    
  }
  access_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), access_token);
  // @@protoc_insertion_point(field_set_allocated:session.SaveRequest.access_token)
}

// string refresh_token = 4;
inline void SaveRequest::clear_refresh_token() {
  refresh_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SaveRequest::refresh_token() const {
  // @@protoc_insertion_point(field_get:session.SaveRequest.refresh_token)
  return refresh_token_.GetNoArena();
}
inline void SaveRequest::set_refresh_token(const ::std::string& value) {
  
  refresh_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:session.SaveRequest.refresh_token)
}
#if LANG_CXX11
inline void SaveRequest::set_refresh_token(::std::string&& value) {
  
  refresh_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:session.SaveRequest.refresh_token)
}
#endif
inline void SaveRequest::set_refresh_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  refresh_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:session.SaveRequest.refresh_token)
}
inline void SaveRequest::set_refresh_token(const char* value, size_t size) {
  
  refresh_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:session.SaveRequest.refresh_token)
}
inline ::std::string* SaveRequest::mutable_refresh_token() {
  
  // @@protoc_insertion_point(field_mutable:session.SaveRequest.refresh_token)
  return refresh_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SaveRequest::release_refresh_token() {
  // @@protoc_insertion_point(field_release:session.SaveRequest.refresh_token)
  
  return refresh_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SaveRequest::set_allocated_refresh_token(::std::string* refresh_token) {
  if (refresh_token != nullptr) {
    
  } else {
    
  }
  refresh_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), refresh_token);
  // @@protoc_insertion_point(field_set_allocated:session.SaveRequest.refresh_token)
}

// -------------------------------------------------------------------

// SaveResponse

// bool success = 1;
inline void SaveResponse::clear_success() {
  success_ = false;
}
inline bool SaveResponse::success() const {
  // @@protoc_insertion_point(field_get:session.SaveResponse.success)
  return success_;
}
inline void SaveResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:session.SaveResponse.success)
}

// -------------------------------------------------------------------

// GetRequest

// string sessid = 1;
inline void GetRequest::clear_sessid() {
  sessid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetRequest::sessid() const {
  // @@protoc_insertion_point(field_get:session.GetRequest.sessid)
  return sessid_.GetNoArena();
}
inline void GetRequest::set_sessid(const ::std::string& value) {
  
  sessid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:session.GetRequest.sessid)
}
#if LANG_CXX11
inline void GetRequest::set_sessid(::std::string&& value) {
  
  sessid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:session.GetRequest.sessid)
}
#endif
inline void GetRequest::set_sessid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sessid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:session.GetRequest.sessid)
}
inline void GetRequest::set_sessid(const char* value, size_t size) {
  
  sessid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:session.GetRequest.sessid)
}
inline ::std::string* GetRequest::mutable_sessid() {
  
  // @@protoc_insertion_point(field_mutable:session.GetRequest.sessid)
  return sessid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetRequest::release_sessid() {
  // @@protoc_insertion_point(field_release:session.GetRequest.sessid)
  
  return sessid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRequest::set_allocated_sessid(::std::string* sessid) {
  if (sessid != nullptr) {
    
  } else {
    
  }
  sessid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessid);
  // @@protoc_insertion_point(field_set_allocated:session.GetRequest.sessid)
}

// -------------------------------------------------------------------

// GetResponse

// int64 userId = 1;
inline void GetResponse::clear_userid() {
  userid_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GetResponse::userid() const {
  // @@protoc_insertion_point(field_get:session.GetResponse.userId)
  return userid_;
}
inline void GetResponse::set_userid(::google::protobuf::int64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:session.GetResponse.userId)
}

// string access_token = 2;
inline void GetResponse::clear_access_token() {
  access_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetResponse::access_token() const {
  // @@protoc_insertion_point(field_get:session.GetResponse.access_token)
  return access_token_.GetNoArena();
}
inline void GetResponse::set_access_token(const ::std::string& value) {
  
  access_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:session.GetResponse.access_token)
}
#if LANG_CXX11
inline void GetResponse::set_access_token(::std::string&& value) {
  
  access_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:session.GetResponse.access_token)
}
#endif
inline void GetResponse::set_access_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  access_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:session.GetResponse.access_token)
}
inline void GetResponse::set_access_token(const char* value, size_t size) {
  
  access_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:session.GetResponse.access_token)
}
inline ::std::string* GetResponse::mutable_access_token() {
  
  // @@protoc_insertion_point(field_mutable:session.GetResponse.access_token)
  return access_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetResponse::release_access_token() {
  // @@protoc_insertion_point(field_release:session.GetResponse.access_token)
  
  return access_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetResponse::set_allocated_access_token(::std::string* access_token) {
  if (access_token != nullptr) {
    
  } else {
    
  }
  access_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), access_token);
  // @@protoc_insertion_point(field_set_allocated:session.GetResponse.access_token)
}

// string refresh_token = 3;
inline void GetResponse::clear_refresh_token() {
  refresh_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetResponse::refresh_token() const {
  // @@protoc_insertion_point(field_get:session.GetResponse.refresh_token)
  return refresh_token_.GetNoArena();
}
inline void GetResponse::set_refresh_token(const ::std::string& value) {
  
  refresh_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:session.GetResponse.refresh_token)
}
#if LANG_CXX11
inline void GetResponse::set_refresh_token(::std::string&& value) {
  
  refresh_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:session.GetResponse.refresh_token)
}
#endif
inline void GetResponse::set_refresh_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  refresh_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:session.GetResponse.refresh_token)
}
inline void GetResponse::set_refresh_token(const char* value, size_t size) {
  
  refresh_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:session.GetResponse.refresh_token)
}
inline ::std::string* GetResponse::mutable_refresh_token() {
  
  // @@protoc_insertion_point(field_mutable:session.GetResponse.refresh_token)
  return refresh_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetResponse::release_refresh_token() {
  // @@protoc_insertion_point(field_release:session.GetResponse.refresh_token)
  
  return refresh_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetResponse::set_allocated_refresh_token(::std::string* refresh_token) {
  if (refresh_token != nullptr) {
    
  } else {
    
  }
  refresh_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), refresh_token);
  // @@protoc_insertion_point(field_set_allocated:session.GetResponse.refresh_token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace session

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_service_2eproto
